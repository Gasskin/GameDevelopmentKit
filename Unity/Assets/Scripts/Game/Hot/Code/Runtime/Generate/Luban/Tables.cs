
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Luban;

namespace Game.Hot
{
public partial class Tables
{
    public DTOneConfig DTOneConfig { private set; get; }
    public DTAircraft DTAircraft { private set; get; }
    public DTArmor DTArmor { private set; get; }
    public DTAsteroid DTAsteroid { private set; get; }
    public DTThruster DTThruster { private set; get; }
    public DTWeapon DTWeapon { private set; get; }
    public DTWeapon1 DTWeapon1 { private set; get; }
    private System.Collections.Generic.Dictionary<string, IDataTable> _tables;
    public System.Collections.Generic.IEnumerable<IDataTable> DataTables => _tables.Values;
    public IDataTable GetDataTable(string tableName) => _tables.TryGetValue(tableName, out var v) ? v : null;

    public async Cysharp.Threading.Tasks.UniTask LoadAsync(System.Func<string, Cysharp.Threading.Tasks.UniTask<ByteBuf>> loader)
    {
        TablesMemory.BeginRecord();

        _tables = new System.Collections.Generic.Dictionary<string, IDataTable>();
        var loadTasks = new System.Collections.Generic.List<Cysharp.Threading.Tasks.UniTask>();

        DTOneConfig = new DTOneConfig(() => loader("dtoneconfig"));
        loadTasks.Add(DTOneConfig.LoadAsync());
        _tables.Add("DTOneConfig", DTOneConfig);
        DTAircraft = new DTAircraft(() => loader("dtaircraft"));
        loadTasks.Add(DTAircraft.LoadAsync());
        _tables.Add("DTAircraft", DTAircraft);
        DTArmor = new DTArmor(() => loader("dtarmor"));
        loadTasks.Add(DTArmor.LoadAsync());
        _tables.Add("DTArmor", DTArmor);
        DTAsteroid = new DTAsteroid(() => loader("dtasteroid"));
        loadTasks.Add(DTAsteroid.LoadAsync());
        _tables.Add("DTAsteroid", DTAsteroid);
        DTThruster = new DTThruster(() => loader("dtthruster"));
        loadTasks.Add(DTThruster.LoadAsync());
        _tables.Add("DTThruster", DTThruster);
        DTWeapon = new DTWeapon(() => loader("dtweapon"));
        loadTasks.Add(DTWeapon.LoadAsync());
        _tables.Add("DTWeapon", DTWeapon);
        DTWeapon1 = new DTWeapon1(() => loader("dtweapon1"));
        loadTasks.Add(DTWeapon1.LoadAsync());
        _tables.Add("DTWeapon1", DTWeapon1);

        await Cysharp.Threading.Tasks.UniTask.WhenAll(loadTasks);

        Refresh();

        TablesMemory.EndRecord();
    }

    private void ResolveRef()
    {
        DTOneConfig.ResolveRef(this);
        DTAircraft.ResolveRef(this);
        DTArmor.ResolveRef(this);
        DTAsteroid.ResolveRef(this);
        DTThruster.ResolveRef(this);
        DTWeapon.ResolveRef(this);
        DTWeapon1.ResolveRef(this);
        PostResolveRef();
    }

    public void Refresh()
    {
        PostInit();
        ResolveRef();
    }

    partial void PostInit();
    partial void PostResolveRef();
}
}
